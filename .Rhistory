fltr.subregion = "")
# Calculate scope 2 electricity ghg emissions based on a simulation of grid emissions intensity
ghg_conversion2("weatherize_ref_ghg_elec", "weatherize_intv_ghg_elec", ef_sim_electricity, weatherize_ref_data1, weatherize_intv_data1)
# Calculate scope 3 supply chain ghg emissions based on a simulation of the upstream spend-based emission factor
ghg_conversion3("weatherize_ref_ghg_upstream", "weatherize_intv_ghg_upstream", ef_sim_weatherize_upstream, weatherize_ref_capex1, weatherize_intv_capex1)
# Calculate total weatherize GHG emissions
weatherize_ref_ghg_total <- weatherize_ref_ghg_natgas[, -1] + weatherize_ref_ghg_elec[, -1] + weatherize_ref_ghg_upstream[, -1]
weatherize_intv_ghg_total <- weatherize_intv_ghg_natgas[, -1] + weatherize_intv_ghg_elec[, -1] + weatherize_intv_ghg_upstream[, -1]
# Simulate annual electricity consumption for water heating. Each home in the boundary is simulated individually. The intervention factor is the % energy savings, also simulated for each home in the boundary.
calc_ad1("hpwh_ref_ann_data1",
"hpwh_intv_ann_data1",
hpwh_boundary_mgnl,
ref_pdf = rnorm,
ref_params = list(mean = 2969, sd = 108.1), # Reference electricity consumption is modeled with a normal distribution
intv_pdf = runif,
intv_params = list(min = 0.30, max = 0.70), # Intervention factor, % savings, is modeled with a uniform distribution
units = "kWh")
# Calculate cumulative activity data
cumul_sum2("hpwh_ref_data1", hpwh_ref_ann_data1)
cumul_sum2("hpwh_intv_data1", hpwh_intv_ann_data1)
# Simulate annual natural gas consumption for space heating. Each home in the boundary is simulated individually. The intervention factor is the % energy savings, also simulated for each home in the boundary.
calc_ad1("hpwh_ref_ann_data2",
"hpwh_intv_ann_data2",
hpwh_boundary_mgnl,
ref_pdf = rnorm,
ref_params = list(mean = 237, sd = 4), # Reference natural gas consumption is modeled with a normal distribution
intv_pdf = runif,
intv_params = list(min = 0.30, max = 0.70), # Intervention factor, % savings,is modeled with a uniform distribution
units = "therms")
# Calculate cumulative activity data
cumul_sum2("hpwh_ref_data2", hpwh_ref_ann_data2)
cumul_sum2("hpwh_intv_data2", hpwh_intv_ann_data2)
# HPWH Capex is calculated by simulating the installation costs for each home
calculate_capex("hpwh_ref_capex1", "hpwh_intv_capex1", ref_boundary_mgnl, hpwh_boundary_mgnl, capex_min = 1300, capex_max = 2900, units = "USD")
# Sum total Capex
hpwh_ref_sumcapex <- hpwh_ref_capex1[,-1]
hpwh_intv_sumcapex <- hpwh_intv_capex1[,-1]
# HPWH Opex is calculated for electricity and natural gas separately, based on current energy prices
calculate_opex("hpwh_ref_opex1", "hpwh_intv_opex1", hpwh_ref_data1, hpwh_intv_data1, opex = 0.1542, units = "USD")
calculate_opex("hpwh_ref_opex2", "hpwh_intv_opex2", hpwh_ref_data2, hpwh_intv_data2, opex = 0.3434, units = "therms")
# Sum total Opex
hpwh_ref_sumopex <- hpwh_ref_opex1[,-1] + hpwh_ref_opex2[,-1]
hpwh_intv_sumopex <- hpwh_intv_opex1[,-1] + hpwh_intv_opex2[,-1]
# Calculate scope 1 natural gas emissions
ghg_conversion1("hpwh_ref_ghg_natgas",
"hpwh_intv_ghg_natgas",
hpwh_ref_data2,
hpwh_intv_data2,
fltr.ef_activeyear = 2024,
fltr.service_type = "natural gas",
fltr.emission_category = "stationary",
fltr.emission_scope = "scope 1",
fltr.service_subcategory1 = "",
fltr.service_subcategory2 = "",
fltr.country = "global",
fltr.subregion = "")
# Calculate scope 2 electricity ghg emissions based on a simulation of grid emissions intensity
ghg_conversion2("hpwh_ref_ghg_elec", "hpwh_intv_ghg_elec", ef_sim_electricity, hpwh_ref_data1, hpwh_intv_data1)
# Calculate scope 3 supply chain ghg emissions based on a simulation of the upstream spend-based emission factor
ghg_conversion3("hpwh_ref_ghg_upstream", "hpwh_intv_ghg_upstream", ef_sim_appliances_upstream, hpwh_ref_capex1, hpwh_intv_capex1)
# Calculate total HPWH GHG emissions
hpwh_ref_ghg_total <- hpwh_ref_ghg_natgas[, -1] + hpwh_ref_ghg_elec[, -1] + hpwh_ref_ghg_upstream[, -1]
hpwh_intv_ghg_total <- hpwh_intv_ghg_natgas[, -1] + hpwh_intv_ghg_elec[, -1] + hpwh_intv_ghg_upstream[, -1]
# calculate total reference GHG emissions
ref_ghg_total <- (ashp_ref_ghg_total + weatherize_ref_ghg_total + hpwh_ref_ghg_total)/1000
ref_ghg_total <- ref_ghg_total %>%
mutate(unit = "mtco2e") %>%
select(unit, everything())
# calculate total intervention GHG emissions
intv_ghg_total <- (ashp_intv_ghg_total + weatherize_intv_ghg_total + hpwh_intv_ghg_total)/1000
intv_ghg_total <- intv_ghg_total %>%
mutate(unit = "mtco2e") %>%  #
select(unit, everything())
# Calculate GHG mitigation
ghg_mitigation <- ref_ghg_total[, -1] - intv_ghg_total[, -1]
ghg_mitigation <- ghg_mitigation %>%
mutate(unit = "mtco2e") %>%
select(unit, everything())
# Calculate total reference scenario costs
ref_opex_total <- ashp_ref_sumopex + weatherize_ref_sumopex + hpwh_ref_sumopex
ref_capex_total <- ashp_ref_sumcapex + weatherize_ref_sumcapex + hpwh_ref_sumcapex
ref_costs_econ <- ref_opex_total + ref_capex_total
# Calculate total intervention scenario costs
intv_opex_total <- ashp_intv_sumopex + weatherize_intv_sumopex + hpwh_intv_sumopex
intv_capex_total <- ashp_intv_sumcapex + weatherize_intv_sumcapex + hpwh_intv_sumcapex
intv_costs_econ <- intv_opex_total + intv_capex_total
# Social cost of carbon (SCC) is modeled as a normal distribution. It's modeled as an avoided cost, so a positive value is used.
# mean = $185 sd = $85.7
# The selected value for each simulation is applied consistently over the scenario lifetime.
normal_PDF("coben1_sim", 185, 85.7, units = "USD/mtco2e")
# The function above leads to negative values for the social cost of carbon. In practice, this does not make sense. So negative values are converted to 0 below
coben1_sim[coben1_sim < 0] <- 0
# Calculate social value from Parameter 1 co-benefits
coben1_value <- ghg_mitigation[, -1] * coben1_sim[, -1]
coben1_value <- coben1_value %>%
mutate(unit = "social value of avoided carbon (USD)") %>%
select(unit, everything())
coben_value_trim <- coben1_value[, -1]
# Calculate cashflow
cashflow_investment <- intv_capex_total - ref_capex_total # Assuming capex costs = investment costs
cashflow_opex <- intv_opex_total - ref_opex_total
cashflow_econ <- intv_costs_econ - ref_costs_econ
cashflow_social <- cashflow_econ + coben_value_trim
cashflow_private <- cashflow_econ # This is a space holder for now. This could use the average rebate coverage to calculate cost to city of Flag
ashp_outputlist <- (list("ashp_boundary_mgnl" = ashp_boundary_mgnl,
"ashp_ref_ann_data1" = ashp_ref_ann_data1,
"ashp_ref_ann_data2" = ashp_ref_ann_data2,
"ashp_ref_data1" = ashp_ref_data1,
"ashp_ref_data2" = ashp_ref_data2,
"ashp_ref_ghg_elec" = ashp_ref_ghg_elec,
"ashp_ref_ghg_natgas" = ashp_ref_ghg_natgas,
"ashp_ref_ghg_total" = ashp_ref_ghg_total,
"ashp_ref_ghg_upstream" = ashp_ref_ghg_upstream,
"ashp_ref_capex1" = ashp_ref_capex1,
"ashp_ref_opex1" = ashp_ref_opex1,
"ashp_ref_opex2" = ashp_ref_opex2,
"ashp_ref_sumcapex" = ashp_ref_sumcapex,
"ashp_ref_sumopex" = ashp_ref_sumopex,
"ashp_intv_ann_data1" = ashp_intv_ann_data1,
"ashp_intv_ann_data2" = ashp_intv_ann_data2,
"ashp_intv_data1" = ashp_intv_data1,
"ashp_intv_data2" = ashp_intv_data2,
"ashp_intv_ghg_elec" = ashp_intv_ghg_elec,
"ashp_intv_ghg_natgas" = ashp_intv_ghg_natgas,
"ashp_intv_ghg_total" = ashp_intv_ghg_total,
"ashp_intv_ghg_upstream" = ashp_intv_ghg_upstream,
"ashp_intv_capex1" = ashp_intv_capex1,
"ashp_intv_opex1" = ashp_intv_opex1,
"ashp_intv_opex2" = ashp_intv_opex2,
"ashp_intv_sumcapex" = ashp_intv_sumcapex,
"ashp_intv_sumopex" = ashp_intv_sumopex)
)
weatherize_outputlist <- (list("weatherize_boundary_mgnl" = weatherize_boundary_mgnl,
"weatherize_ref_ann_data1" = weatherize_ref_ann_data1,
"weatherize_ref_ann_data2" = weatherize_ref_ann_data2,
"weatherize_ref_data1" = weatherize_ref_data1,
"weatherize_ref_data2" = weatherize_ref_data2,
"weatherize_ref_ghg_elec" = weatherize_ref_ghg_elec,
"weatherize_ref_ghg_natgas" = weatherize_ref_ghg_natgas,
"weatherize_ref_ghg_total" = weatherize_ref_ghg_total,
"weatherize_ref_ghg_upstream" = weatherize_ref_ghg_upstream,
"weatherize_ref_capex1" = weatherize_ref_capex1,
"weatherize_ref_opex1" = weatherize_ref_opex1,
"weatherize_ref_opex2" = weatherize_ref_opex2,
"weatherize_ref_sumcapex" = weatherize_ref_sumcapex,
"weatherize_ref_sumopex" = weatherize_ref_sumopex,
"weatherize_intv_ann_data1" = weatherize_intv_ann_data1,
"weatherize_intv_ann_data2" = weatherize_intv_ann_data2,
"weatherize_intv_data1" = weatherize_intv_data1,
"weatherize_intv_data2" = weatherize_intv_data2,
"weatherize_intv_ghg_elec" = weatherize_intv_ghg_elec,
"weatherize_intv_ghg_natgas" = weatherize_intv_ghg_natgas,
"weatherize_intv_ghg_total" = weatherize_intv_ghg_total,
"weatherize_intv_ghg_upstream" = weatherize_intv_ghg_upstream,
"weatherize_intv_capex1" = weatherize_intv_capex1,
"weatherize_intv_opex1" = weatherize_intv_opex1,
"weatherize_intv_opex2" = weatherize_intv_opex2,
"weatherize_intv_sumcapex" = weatherize_intv_sumcapex,
"weatherize_intv_sumopex" = weatherize_intv_sumopex)
)
hpwh_outputlist <- (list("hpwh_boundary_mgnl" = hpwh_boundary_mgnl,
"hpwh_ref_ann_data1" = hpwh_ref_ann_data1,
"hpwh_ref_ann_data2" = hpwh_ref_ann_data2,
"hpwh_ref_data1" = hpwh_ref_data1,
"hpwh_ref_data2" = hpwh_ref_data2,
"hpwh_ref_ghg_elec" = hpwh_ref_ghg_elec,
"hpwh_ref_ghg_natgas" = hpwh_ref_ghg_natgas,
"hpwh_ref_ghg_total" = hpwh_ref_ghg_total,
"hpwh_ref_ghg_upstream" = hpwh_ref_ghg_upstream,
"hpwh_ref_capex1" = hpwh_ref_capex1,
"hpwh_ref_opex1" = hpwh_ref_opex1,
"hpwh_ref_opex2" = hpwh_ref_opex2,
"hpwh_ref_sumcapex" = hpwh_ref_sumcapex,
"hpwh_ref_sumopex" = hpwh_ref_sumopex,
"hpwh_intv_ann_data1" = hpwh_intv_ann_data1,
"hpwh_intv_ann_data2" = hpwh_intv_ann_data2,
"hpwh_intv_data1" = hpwh_intv_data1,
"hpwh_intv_data2" = hpwh_intv_data2,
"hpwh_intv_ghg_elec" = hpwh_intv_ghg_elec,
"hpwh_intv_ghg_natgas" = hpwh_intv_ghg_natgas,
"hpwh_intv_ghg_total" = hpwh_intv_ghg_total,
"hpwh_intv_ghg_upstream" = hpwh_intv_ghg_upstream,
"hpwh_intv_capex1" = hpwh_intv_capex1,
"hpwh_intv_opex1" = hpwh_intv_opex1,
"hpwh_intv_opex2" = hpwh_intv_opex2,
"hpwh_intv_sumcapex" = hpwh_intv_sumcapex,
"hpwh_intv_sumopex" = hpwh_intv_sumopex)
)
summary_outputlist <- (list("cashflow_investment" = cashflow_investment,
"cashflow_opex" = cashflow_opex,
"cashflow_private" = cashflow_private,
"cashflow_econ" = cashflow_econ,
"cashflow_social" = cashflow_social,
"coben1_sim" = coben1_sim,
"coben1_value" = coben1_value,
"ghg_mitigation" = ghg_mitigation,
"intv_boundary_mgnl" = intv_boundary_mgnl,
"intv_capex_total" = intv_capex_total,
"intv_costs_econ" = intv_costs_econ,
"intv_ghg_total" = intv_ghg_total,
"intv_opex_total" = intv_opex_total,
"ref_boundary_mgnl" = ref_boundary_mgnl,
"ref_capex_total" = ref_capex_total,
"ref_costs_econ" = ref_costs_econ,
"ref_ghg_total" = ref_ghg_total,
"ref_opex_total" = ref_opex_total)
)
write_xlsx(ashp_outputlist, path = "ashp_output.xlsx")
write_xlsx(weatherize_outputlist, path = "weatherize_output.xlsx")
write_xlsx(hpwh_outputlist, path = "hpwh_output.xlsx")
write_xlsx(summary_outputlist, path = "summary_output.xlsx")
# Electricity
# Create dataframe with total mwh for each scenario
ref_mwh <- ashp_ref_data1[,-1] + weatherize_ref_data1[,-1] + hpwh_ref_data1[,-1]
ref_mwh <- ref_mwh / 1000
intv_mwh <- ashp_intv_data1[,-1] + weatherize_intv_data1[,-1] + hpwh_intv_data1[,-1]
intv_mwh <- intv_mwh / 1000
mcs_stats_cumul("ref_mwh_stats", ref_mwh, lower_bound_out = .05, lower_bound_in = .25, upper_bound_in = .75, upper_bound_out = .95)
mcs_stats_cumul("intv_mwh_stats", intv_mwh, lower_bound_out = .05, lower_bound_in = .25, upper_bound_in = .75, upper_bound_out = .95)
# Convert year column to numeric
ref_mwh_stats$year <- as.numeric(ref_mwh_stats$year)
intv_mwh_stats$year <- as.numeric(intv_mwh_stats$year)
# Add an identifier column to each dataframe
ref_mwh_stats$Scenario <- "Reference Scenario"
intv_mwh_stats$Scenario <- "Intervention Scenario"
mwhplot <- bind_rows(ref_mwh_stats, intv_mwh_stats)
# mwh comparison plot
p_mwh <- ggplot(mwhplot, aes(x = year, y = median, color = Scenario, fill = Scenario)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = lb1, ymax = ub1), alpha = 0.25, color = NA) +
geom_ribbon(aes(ymin = lb2, ymax = ub2), alpha = 0.4, color = NA) +
labs(title = "a",
x = "Year",
y = "Megawatt-hours") +
scale_y_continuous(labels = comma, breaks = scales::breaks_extended(n = 6)) +
scale_x_continuous(
breaks = seq(scenario_start, scenario_end, by = 5),
labels = seq(scenario_start, scenario_end, by = 5)) +
theme_minimal() +
scale_color_manual(values = c("Reference Scenario" = "darkblue", "Intervention Scenario" = "darkgreen")) +
scale_fill_manual(values = c("Reference Scenario" = "darkblue", "Intervention Scenario" = "darkgreen")) +
theme(text = element_text(size = 8, color = "black"),
plot.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 8, color = "black"),
axis.title = element_text(size = 8, color = "black"),
legend.text = element_text(size = 8, color = "black"),
axis.ticks = element_line(color = "black", size = .5),
axis.line = element_line(color = "black", size = .5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1)
# Natural Gas
# Create dataframe with total mmbtu for each scenario
ref_mmbtu <- ashp_ref_data2[,-1] + weatherize_ref_data2[,-1] + hpwh_ref_data2[,-1]
ref_mmbtu <- ref_mmbtu / 10
intv_mmbtu <- ashp_intv_data2[,-1] + weatherize_intv_data2[,-1] + hpwh_intv_data2[,-1]
intv_mmbtu <- intv_mmbtu / 10
mcs_stats_cumul("ref_mmbtu_stats", ref_mmbtu, lower_bound_out = .05, lower_bound_in = .25, upper_bound_in = .75, upper_bound_out = .95)
mcs_stats_cumul("intv_mmbtu_stats", intv_mmbtu, lower_bound_out = .05, lower_bound_in = .25, upper_bound_in = .75, upper_bound_out = .95)
# Convert year column to numeric
ref_mmbtu_stats$year <- as.numeric(ref_mmbtu_stats$year)
intv_mmbtu_stats$year <- as.numeric(intv_mmbtu_stats$year)
# Add an identifier column to each dataframe
ref_mmbtu_stats$Scenario <- "Reference Scenario"
intv_mmbtu_stats$Scenario <- "Intervention Scenario"
mmbtuplot <- bind_rows(ref_mmbtu_stats, intv_mmbtu_stats)
# mmbtu comparison plot
p_mmbtu <- ggplot(mmbtuplot, aes(x = year, y = median, color = Scenario, fill = Scenario)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = lb1, ymax = ub1), alpha = 0.25, color = NA) +
geom_ribbon(aes(ymin = lb2, ymax = ub2), alpha = 0.4, color = NA) +
labs(title = "b",
x = "Year",
y = "Million BTUs") +
scale_y_continuous(labels = comma, breaks = scales::breaks_extended(n = 6)) +
scale_x_continuous(
breaks = seq(scenario_start, scenario_end, by = 5),
labels = seq(scenario_start, scenario_end, by = 5)) +
theme_minimal() +
scale_color_manual(values = c("Reference Scenario" = "darkblue", "Intervention Scenario" = "darkgreen")) +
scale_fill_manual(values = c("Reference Scenario" = "darkblue", "Intervention Scenario" = "darkgreen")) +
theme(text = element_text(size = 8, color = "black"),
plot.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 8, color = "black"),
axis.title = element_text(size = 8, color = "black"),
legend.text = element_text(size = 8, color = "black"),
axis.ticks = element_line(color = "black", size = .5),
axis.line = element_line(color = "black", size = .5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1)
p1 <- p_mwh + p_mmbtu + plot_layout(guides = 'collect')
ggsave("figures/fig1.png", plot = p1, width = 6.5, height = 2.5, dpi = 300)
# Capex & opex cashflow
quick_discount("capex3.5", cashflow_investment, dr = 3.5)
quick_discount("opex3.5", cashflow_opex, dr = 3.5)
mcs_stats_ann("capex3.5_stats", capex3.5, lower_bound_out = .05, lower_bound_in = .25, upper_bound_in = .75, upper_bound_out = .95)
mcs_stats_ann("opex3.5_stats", opex3.5, lower_bound_out = .05, lower_bound_in = .25, upper_bound_in = .75, upper_bound_out = .95)
# Convert year column to numeric
capex3.5_stats$year <- as.numeric(capex3.5_stats$year)
opex3.5_stats$year <- as.numeric(opex3.5_stats$year)
# capex plot
p_capex <- ggplot(capex3.5_stats, aes(x = year, y = median)) +
geom_line(aes(group = 1), color = "deepskyblue4", size = .5) +
geom_ribbon(aes(ymin = lb1, ymax = ub1, group = 1), fill = "deepskyblue4", alpha = 0.25) +
geom_ribbon(aes(ymin = lb2, ymax = ub2, group = 1), fill = "deepskyblue4", alpha = 0.4) +
labs(title = "a",
x = "Year",
y = "Annual Capex\n(present value USD)") +
scale_y_continuous(labels = comma, breaks = scales::breaks_extended(n = 6)) +
scale_x_continuous(
breaks = seq(scenario_start, scenario_end, by = 10),
labels = seq(scenario_start, scenario_end, by = 10)) +
theme_minimal() +
theme(text = element_text(size = 8, color = "black"),
plot.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 8, color = "black"),
axis.title = element_text(size = 8, color = "black"),
legend.text = element_text(size = 8, color = "black"),
axis.ticks = element_line(color = "black", size = .5),
axis.line = element_line(color = "black", size = .5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1)
# opex plot
p_opex <- ggplot(opex3.5_stats, aes(x = year, y = median)) +
geom_line(aes(group = 1), color = "palegreen4", size = .5) +
geom_ribbon(aes(ymin = lb1, ymax = ub1, group = 1), fill = "palegreen4", alpha = 0.25) +
geom_ribbon(aes(ymin = lb2, ymax = ub2, group = 1), fill = "palegreen4", alpha = 0.4) +
labs(title = "b",
x = "Year",
y = "Annual Opex\n(present value USD)") +
scale_y_continuous(labels = comma, breaks = scales::breaks_extended(n = 6)) +
scale_x_continuous(
breaks = seq(scenario_start, scenario_end, by = 10),
labels = seq(scenario_start, scenario_end, by = 10)) +
theme_minimal() +
theme(text = element_text(size = 8, color = "black"),
plot.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 8, color = "black"),
axis.title = element_text(size = 8, color = "black"),
legend.text = element_text(size = 8, color = "black"),
axis.ticks = element_line(color = "black", size = .5),
axis.line = element_line(color = "black", size = .5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1)
# Economic cashflow plot
quick_discount("cashflow_econ3.5", cashflow_econ, dr = 3.5)
mcs_stats_cumul("cashflow_stats", cashflow_econ3.5, lower_bound_out = .05, lower_bound_in = .25, upper_bound_in = .75, upper_bound_out = .95)
# Convert year column to numeric
cashflow_stats$year <- as.numeric(cashflow_stats$year)
# Plot
p_cashflow <- ggplot(cashflow_stats, aes(x = year, y = median)) +
geom_line(aes(group = 1), color = "sienna", size = .5) +
geom_ribbon(aes(ymin = lb1, ymax = ub1, group = 1), fill = "sienna", alpha = 0.25) +
geom_ribbon(aes(ymin = lb2, ymax = ub2, group = 1), fill = "sienna", alpha = 0.4) +
labs(title = "c",
x = "Year",
y = "Cumulative Cashflow\n(present value USD)") +
scale_y_continuous(labels = comma, breaks = scales::breaks_extended(n = 6)) +
scale_x_continuous(
breaks = seq(scenario_start, scenario_end, by = 10),
labels = seq(scenario_start, scenario_end, by = 10)) +
theme_minimal() +
theme(text = element_text(size = 8, color = "black"),
plot.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 8, color = "black"),
axis.title = element_text(size = 8, color = "black"),
legend.text = element_text(size = 8, color = "black"),
axis.ticks = element_line(color = "black", size = .5),
axis.line = element_line(color = "black", size = .5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = 1)
p2 <- p_capex + p_opex + p_cashflow
ggsave("figures/fig2.png", plot = p2, width = 6.5, height = 2, dpi = 300)
# GHG mitigation histogram
cumul_sum1("ghg_cumul", ghg_mitigation)
mcs_stats_cumul("ghg_stats", ghg_mitigation[, -1], lower_bound_out = .05, lower_bound_in = .25, upper_bound_in = .75, upper_bound_out = .95)
total_ghg_mit <- as.data.frame(ghg_cumul[,26])
# GHG mitigation histogram
cumul_sum1("ghg_cumul", ghg_mitigation)
mcs_stats_cumul("ghg_stats", ghg_mitigation[, -1], lower_bound_out = .05, lower_bound_in = .25, upper_bound_in = .75, upper_bound_out = .95)
total_ghg_mit <- as.data.frame(ghg_cumul[,(scenario_years + 1)])
ghg_lb1 <- ghg_stats[scenario_years,2]
ghg_lb2 <- ghg_stats[scenario_years,3]
ghg_median <- ghg_stats[scenario_years,4]
ghg_ub2 <- ghg_stats[scenario_years,5]
ghg_ub1 <- ghg_stats[scenario_years,6]
ghg_bin <- (ghg_median - ghg_lb)/3
# GHG mitigation histogram
cumul_sum1("ghg_cumul", ghg_mitigation)
mcs_stats_cumul("ghg_stats", ghg_mitigation[, -1], lower_bound_out = .05, lower_bound_in = .25, upper_bound_in = .75, upper_bound_out = .95)
total_ghg_mit <- as.data.frame(ghg_cumul[,(scenario_years + 1)])
ghg_lb1 <- ghg_stats[scenario_years,2]
ghg_lb2 <- ghg_stats[scenario_years,3]
ghg_median <- ghg_stats[scenario_years,4]
ghg_ub2 <- ghg_stats[scenario_years,5]
ghg_ub1 <- ghg_stats[scenario_years,6]
ghg_bin <- (ghg_median - ghg_lb2)/3
p3 <- ggplot(total_ghg_mit, aes(x = total_ghg_mit[,1])) +
geom_histogram(binwidth = ghg_bin, fill = "darkgrey", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = ghg_median, color = "Median"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = ghg_lb1, color = "5%-95% Quantile Range"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = ghg_lb2, color = "25%-75% Quantile Range"), linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = ghg_ub2), color = "orange3", linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = ghg_ub1), color = "darkgreen", linetype = "dashed", size = 1) +
labs(title = NULL, x = "tco2e", y = "Frequency") +
scale_x_continuous(labels = comma, breaks = scales::breaks_extended(n = 10)) +
theme_minimal() +
theme(text = element_text(size = 8, color = "black"),
plot.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 8, color = "black"),
axis.title = element_text(size = 8, color = "black"),
legend.text = element_text(size = 8, color = "black"),
axis.ticks = element_line(color = "black", size = .5),
axis.line = element_line(color = "black", size = .5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = .5,
legend.position = "right",
legend.title = element_blank()) +
scale_color_manual(name = NULL,
values = c("Median" = "darkblue",
"25%-75% Quantile Range" = "orange3",
"5%-95% Quantile Range" = "darkgreen"),
breaks = c("Median", "25%-75% Quantile Range", "5%-95% Quantile Range"),
guide = guide_legend(override.aes = list(linetype = 1)))
ggsave("figures/fig3.png", plot = p3, width = 6.5, height = 3, dpi = 300)
# Electricity scenarios
elec_ef_scenarios <- read_excel("scenarios.xlsx", sheet = "electricity_ef")
fig4_trim <- cbind(elec_ef_scenarios[, 3], elec_ef_scenarios[, 9:34])
fig4_data <- fig4_trim %>%
pivot_longer(cols = starts_with("20"),
names_to = "year",
values_to = "value")
fig4_data$year <- as.numeric(fig4_data$year)
colnames(fig4_data)[1] <- "scenario"
p4_scenario_order <- c("Mid-case",
"Low Renewable Energy Costs",
"High Renewable Energy Costs",
"Low Natural Gas Prices",
"High Natural Gas Prices",
"High Demand Growth",
"95% Decarbonization by 2050",
"100% Decarbonization by 2035")
p4_colors <- c(
"Mid-case" = "#1F77B4",  # Blue
"Low Renewable Energy Costs" = "#FF7F0E",  # Orange
"High Renewable Energy Costs" = "#2CA02C",  # Green
"Low Natural Gas Prices" = "#D62728",  # Red
"High Natural Gas Prices" = "#9467BD",  # Purple
"High Demand Growth" = "#8C564B",  # Brown
"95% Decarbonization by 2050" = "#E377C2",  # Light Purple
"100% Decarbonization by 2035" = "#7F7F7F"  # Gray
)
p4 <- ggplot(fig4_data, aes(x = year, y = value, color = scenario, group = scenario)) +
geom_line(size = 1) +
labs(title = NULL,
x = "Year", y = "kgco2e/kWh", color = "Scenario") +
scale_color_manual(
values = p4_colors,
breaks = p4_scenario_order) +
theme_minimal() +
theme(text = element_text(size = 8, color = "black"),
plot.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 8, color = "black"),
axis.title = element_text(size = 8, color = "black"),
legend.text = element_text(size = 8, color = "black"),
axis.ticks = element_line(color = "black", size = .5),
axis.line = element_line(color = "black", size = .5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
aspect.ratio = .5,
legend.position = "right")
ggsave("figures/fig4.png", plot = p4, width = 6.5, height = 2.5, dpi = 300)
# Calculates three seperate tables of NPV for private, economic and social costs, using the range of discount rates provided
dr_lb <- 1
dr_ub <- 8
cba_discountrange(dr_min = dr_lb, dr_max = dr_ub, scenario_lifetime = scenario_years)
# Calculates statistics for the Monte Carlo Simulation (lower bound, median, and upper bound)
mcs_cba_stats(lower_bound_out = .05, lower_bound_in = .25, upper_bound_in = .75, upper_bound_out = .95)
# need to convert discount rate column to numeric
npv_stats$dr <- as.numeric(npv_stats$dr)
sroi_stats$dr <- as.numeric(sroi_stats$dr)
lcca_stats$dr <- as.numeric(lcca_stats$dr)
# Produce each panel
cba_econ_plot("npv_econ_plot", npv_stats, c = "orangered4", ylab = "NPV (USD)\n ", xlab = "r", panel = "a")
cba_social_plot("npv_social_plot", npv_stats, c = "orangered4", ylab = NULL, xlab = "r", panel = "b")
cba_econ_plot("sroi_econ_plot", sroi_stats, c = "deepskyblue4", ylab = "SROI (benefits:costs)\n ", xlab = "r", panel = "c")
cba_social_plot("sroi_social_plot", sroi_stats, c = "deepskyblue4", ylab = NULL, xlab = "r", panel = "d")
cba_econ_plot("lcca_econ_plot", lcca_stats, c = "seagreen4", ylab = "LCCA (cost/tco2e)\n ", xlab = "r\n \nEconomic Boundary", panel = "e")
cba_social_plot("lcca_social_plot", lcca_stats, c = "seagreen4", ylab = NULL, xlab = "r\n \nSocial Boundary", panel = "f")
p5 <- npv_econ_plot + npv_social_plot + sroi_econ_plot + sroi_social_plot + lcca_econ_plot + lcca_social_plot +
plot_layout(ncol = 2, nrow = 3)
ggsave("figures/fig5.png", plot = p5, width = 6.5, height = 6.5, dpi = 300)
p1
p2
p4
p3
p5
col2rgb(deepskyblue4)
col2rgb("deepskyblue4"")
col2rgb("deepskyblue4")
col2rgb("deepskyblue4")
# Example: Get hex code for a color
color_name <- "deepskyblue4"
rgb_value <- col2rgb(color_name)
# Convert RGB to Hex code
hex_code <- rgb(rgb_value[1], rgb_value[2], rgb_value[3], maxColorValue = 255)
print(hex_code)
