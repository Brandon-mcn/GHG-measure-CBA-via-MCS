# Extract output variable (last column)
Y <- sim_results$Output
# Fit linear regression model
lm_model <- lm(Y ~ ., data = sim_results)
# Compute SRC: Standardize by multiplying each coefficient by (SD of X) / (SD of Y)
src_values <- coef(lm_model)[-1] * apply(X, 2, sd) / sd(Y)
# Rank variables by absolute SRC value
ranked_src <- sort(abs(src_values), decreasing = TRUE)
# Print ranked variables with SRC values
print(ranked_src)
barplot(abs(ranked_src), names.arg = names(ranked_src), las = 2, col = "blue",
main = "Standardized Regression Coefficients (SRC)", ylab = "Absolute SRC Value")
# Fit a linear regression model using inputs to predict the output
lm_model <- lm(output ~ ., data = inputs)
# Compute standardized regression coefficients (SRC)
src_values <- coef(lm_model)[-1] * apply(inputs, 2, sd) / sd(output)
# Rank variables by absolute SRC value
ranked_src <- sort(abs(src_values), decreasing = TRUE)
# Print ranked variables
print(ranked_src)
prcc_results <- rcorr(as.matrix(inputs), outputs, type = "spearman")  # Spearman's Rank Correlation
print(prcc_results$r)
# Compute PCC (correlation of each input with output while controlling for others)
pcc_results <- pcor(cbind(inputs, output))$estimate
# Extract the last row (correlations between inputs and output)
pcc_values <- pcc_results[nrow(pcc_results), -ncol(pcc_results)]
# Print PCC values
print(pcc_values)
# Convert SRC results into a data frame
src_df <- data.frame(Variable = names(ranked_src), SRC = ranked_src)
ggplot(src_df, aes(x = reorder(Variable, SRC), y = SRC)) +
geom_segment(aes(xend = Variable, yend = 0), color = "gray") +  # Line from y = 0 to y = SRC
geom_point(size = 4, color = "blue") +  # Point at the end of the line
coord_flip() +  # Flip to horizontal layout
labs(title = "Variable Importance (SRC)", x = "Variable", y = "SRC Value") +
theme_minimal()
sens_ghg <- data.frame(p count =  rowSums(intv_boundary_mgnl[,-1]),
# GHG mitigation
sens_ghg <- data.frame(p_count =  rowSums(intv_boundary_mgnl[,-1]),
ashp_ref_kwh = rowSums(ashp_intv_ann_data1[,-1]),
weather_ref_kwh = rowSums(weatherize_intv_ann_data1[,-1]),
hwhp_ref_kwh = rowSums(hpwh_intv_ann_data1[,-1]),
ashp_ref_therms = rowSums(ashp_intv_ann_data2[,-1]),
weather_ref_therms = rowSums(weatherize_intv_ann_data2[,-1]),
hwhp_ref_therms = rowSums(hpwh_intv_ann_data2[,-1]),
ghg_mit = unname(ghg_mit))
inputs <- sens_ghg[, 1:(ncol(sens_ghg) - 1)]  # Model parameters (adjust column range)
output <- sens_ghg[, ncol(sens_ghg)]   # The final column is the emissions reduction result
# Load necessary package for Standardized Regression Coefficients (SRC)
library(boot)
# Fit a linear regression model using inputs to predict the output
lm_model <- lm(output ~ ., data = inputs)
# Compute standardized regression coefficients (SRC)
src_values <- coef(lm_model)[-1] * apply(inputs, 2, sd) / sd(output)
# Rank variables by absolute SRC value
ranked_src <- sort(abs(src_values), decreasing = TRUE)
# Print ranked variables
print(ranked_src)
# Convert SRC results into a data frame
src_df <- data.frame(Variable = names(ranked_src), SRC = ranked_src)
ggplot(src_df, aes(x = reorder(Variable, SRC), y = SRC)) +
geom_segment(aes(xend = Variable, yend = 0), color = "gray") +  # Line from y = 0 to y = SRC
geom_point(size = 4, color = "blue") +  # Point at the end of the line
coord_flip() +  # Flip to horizontal layout
labs(title = "Variable Importance (SRC)", x = "Variable", y = "SRC Value") +
theme_minimal()
View(ref_mwh)
ashp_savings <- (ashp_intv_ann_data1[,-1] - ashp_ref_ann_data1[,-1]) / ashp_ref_ann_data1[,-1]
View(ashp_savings)
ashp_savings <- (rowSums(ashp_intv_ann_data1[,-1]) - rowSums(ashp_ref_ann_data1[,-1])) / rowSums(ashp_intv_ann_data1[,-1])
ashp_savings <- (rowSums(ashp_intv_ann_data1[,-1]) - rowSums(ashp_ref_ann_data1[,-1])) / rowSums(ashp_ref_ann_data1[,-1]
ashp_savings <- (rowSums(ashp_intv_ann_data1[,-1]) - rowSums(ashp_ref_ann_data1[,-1])) / rowSums(ashp_ref_ann_data1[,-1]
ashp_savings <- (rowSums(ashp_intv_ann_data1[,-1]) - rowSums(ashp_ref_ann_data1[,-1])) / rowSums(ashp_ref_ann_data1[,-1])
ashp_savings <- -1 * (rowSums(ashp_intv_ann_data1[,-1]) - rowSums(ashp_ref_ann_data1[,-1])) / rowSums(ashp_ref_ann_data1[,-1])
ashp_savings
source("C:/Users/Brand/GitHub/GHG-measure-CBA-via-MCS/parameter_functions.R")
weatherize_savings <- -1 * (rowSums(weatherize_intv_ann_data1[,-1]) - rowSums(weatherize_ref_ann_data1[,-1])) / rowSums(weatherize_ref_ann_data1[,-1])
hpwh_savings <- -1 * (rowSums(hpwh_intv_ann_data1[,-1]) - rowSums(hpwh_ref_ann_data1[,-1])) / rowSums(hpwh_ref_ann_data1[,-1])
sens_ghg <- data.frame(p_count =  rowSums(intv_boundary_mgnl[,-1]),
ref_mwh = rowSums(ref_mwh),
ref_mmbtu = rowSums(ref_mmbtu),
ashp_savings = ashp_savings,
weatherize_savings = weatherize_savings,
hpwh_savings = hpwh_savings,
ghg_mit = unname(ghg_mit))
inputs <- sens_ghg[, 1:(ncol(sens_ghg) - 1)]  # Model parameters (adjust column range)
output <- sens_ghg[, ncol(sens_ghg)]   # The final column is the emissions reduction result
# Fit a linear regression model using inputs to predict the output
lm_model <- lm(output ~ ., data = inputs)
# Compute standardized regression coefficients (SRC)
src_values <- coef(lm_model)[-1] * apply(inputs, 2, sd) / sd(output)
# Rank variables by absolute SRC value
ranked_src <- sort(abs(src_values), decreasing = TRUE)
# Print ranked variables
print(ranked_src)
# Convert SRC results into a data frame
src_df <- data.frame(Variable = names(ranked_src), SRC = ranked_src)
ggplot(src_df, aes(x = reorder(Variable, SRC), y = SRC)) +
geom_segment(aes(xend = Variable, yend = 0), color = "gray") +  # Line from y = 0 to y = SRC
geom_point(size = 4, color = "blue") +  # Point at the end of the line
coord_flip() +  # Flip to horizontal layout
labs(title = "Variable Importance (SRC)", x = "Variable", y = "SRC Value") +
theme_minimal()
View(ashp_boundary_mgnl)
source("C:/Users/Brand/GitHub/GHG-measure-CBA-via-MCS/parameter_functions.R")
if (!require("dplyr")) install.packages("dplyr")
library(dplyr)
if (!require("readxl")) install.packages("readxl")
library(readxl)
if (!require("writexl")) install.packages("writexl")
library(writexl)
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if (!require("scales")) install.packages("scales")
library(scales)
if (!require("data.table")) install.packages("data.table")
library(data.table)
if (!require("gridExtra")) install.packages("gridExtra")
library(gridExtra)
if (!require("patchwork")) install.packages("patchwork")
library(patchwork)
if (!require("tidyr")) install.packages("tidyr")
library(tidyr)
source("parameter_functions.r")
# Define the following global variables to be called by parameter functions
run_count <- 1000
scenario_start <- 2025
intv_years <- 10 # The number of years the intervention will be implemented
intv_lifetime <- 15 # The number of years the intervention generates benefits, generally the expected lifetime of equipment
scenario_end  <- scenario_start + intv_years + intv_lifetime - 2
scenario_years <- scenario_end - scenario_start + 1
output_headers <- scenario_start:scenario_end
EFL_co2e("ar6")
write_xlsx(EFL, path = "EFLco2e.xlsx")
# Electricity emission factor
scenario_MCS("ef_sim_electricity", sheet_name = "electricity_ef", units = "kgco2e/kWh") #write a custom function for electricity? with the starting value as a input? And NREL grid region as an input as well.
# Supply Chain emission factor
continuous_uniform2("ef_sim_appliances_upstream", minvalue = 0.079, maxvalue = 0.161, units = "kgco2e/USD")
continuous_uniform2("ef_sim_weatherize_upstream", minvalue = 0.082, maxvalue = 0.208, units = "kgco2e/USD")
# Reference boundary represents zero energy efficiency upgrades in each year
static_value("ref_boundary_mgnl", 0, units = "project count")
# Intervention boundary is modeled as a random value between 120 and 160.
# The program is assumed to have funding for 10 years. After that, no more homes are funded.
discrete_uniform3("intv_boundary_mgnl", minvalue = 120, maxvalue = 160, nyears = intv_years, value2 = 0, units = "project count")
# Project types are randomly assigned for the intervention boundary, with three new dataframes for each project type.
assign_projecttype(intv_boundary_mgnl)
calc_ad2(boundary_df = ashp_boundary_mgnl,
ref1_name = "ashp_ref_ann_data1",
ref1_pdf = rnorm,
ref1_units = "kWh",
ref1_params = list(mean = 4161, sd = 233), # Reference electricity consumption is modeled with a normal distribution
ref2_name = "ashp_intv_ann_data2",
ref2_pdf = rnorm,
ref2_units = "therms",
ref2_params = list(mean = 603, sd = 11.3), # Reference natural gas consumption is modeled with a normal distribution
intv_name = "ashp_intv_factor",
intv_pdf = runif,
intv_params = list(min = 0.31, max = 0.47)) # Intervention factor, % savings, is modeled with a uniform distribution
source("C:/Users/Brand/GitHub/GHG-measure-CBA-via-MCS/parameter_functions.R")
calc_ad2(boundary_df = ashp_boundary_mgnl,
ref1_name = "ashp_ref_ann_data1",
ref1_pdf = rnorm,
ref1_units = "kWh",
ref1_params = list(mean = 4161, sd = 233), # Reference electricity consumption is modeled with a normal distribution
ref2_name = "ashp_intv_ann_data2",
ref2_pdf = rnorm,
ref2_units = "therms",
ref2_params = list(mean = 603, sd = 11.3), # Reference natural gas consumption is modeled with a normal distribution
intv_name = "ashp_intv_factor",
intv_pdf = runif,
intv_params = list(min = 0.31, max = 0.47)) # Intervention factor, % savings, is modeled with a uniform distribution
calc_ad2(boundary_df = ashp_boundary_mgnl,
ref1_name = "ashp_ref_ann_data1",
ref1_pdf = rnorm,
ref1_units = "kWh",
ref1_params = list(mean = 4161, sd = 233), # Reference electricity consumption is modeled with a normal distribution
ref2_name = "ashp_intv_ann_data2",
ref2_pdf = rnorm,
ref2_units = "therms",
ref2_params = list(mean = 603, sd = 11.3), # Reference natural gas consumption is modeled with a normal distribution
intv_name = "ashp_intv_factor",
intv_pdf = runif,
intv_params = list(min = 0.31, max = 0.47)) # Intervention factor, % savings, is modeled with a uniform distribution
list(1)
list(120)
source("C:/Users/Brand/GitHub/GHG-measure-CBA-via-MCS/parameter_functions.R")
calc_ad2(boundary_df = ashp_boundary_mgnl,
ref1_name = "ashp_ref_ann_data1",
ref1_pdf = rnorm,
ref1_units = "kWh",
ref1_params = list(mean = 4161, sd = 233), # Reference electricity consumption is modeled with a normal distribution
ref2_name = "ashp_intv_ann_data2",
ref2_pdf = rnorm,
ref2_units = "therms",
ref2_params = list(mean = 603, sd = 11.3), # Reference natural gas consumption is modeled with a normal distribution
intv_name = "ashp_intv_factor",
intv_pdf = runif,
intv_params = list(min = 0.31, max = 0.47)) # Intervention factor, % savings, is modeled with a uniform distribution
source("C:/Users/Brand/GitHub/GHG-measure-CBA-via-MCS/parameter_functions.R")
calc_ad2(boundary_df = ashp_boundary_mgnl,
ref1_name = "ashp_ref_ann_data1",
ref1_pdf = rnorm,
ref1_units = "kWh",
ref1_params = list(mean = 4161, sd = 233), # Reference electricity consumption is modeled with a normal distribution
ref2_name = "ashp_intv_ann_data2",
ref2_pdf = rnorm,
ref2_units = "therms",
ref2_params = list(mean = 603, sd = 11.3), # Reference natural gas consumption is modeled with a normal distribution
intv_name = "ashp_intv_factor",
intv_pdf = runif,
intv_params = list(min = 0.31, max = 0.47)) # Intervention factor, % savings, is modeled with a uniform distribution
View(ashp_boundary_mgnl)
View(ashp_ref_ann_data1)
View(ashp_intv_factor)
# ASHP Capex is calculated by simulating the installation costs for each home
discrete_uniform1("ashp_capex_factor1", minvalue = 2100, maxvalue = 6000, units = "USD")
View(ashp_capex_factor1)
# ASHP Capex is calculated by simulating the installation costs for each home
discrete_uniform1("ashp_capex_factor1", minvalue = 2100, maxvalue = 6000, units = "USD")
ashp_ref_capex1 <- ashp_boundary_mgnl[, -1] * ashp_capex_factor1[, -1]
View(ashp_ref_capex1)
ashp_intv_capex1 <- ashp_boundary_mgnl[, -1] * ashp_capex_factor1[, -1]
# Sum total Capex
ashp_intv_sumcapex <- ashp_intv_capex1
# Simulate annual energy consumption for space heating and cooling.
calc_ad2(boundary_df = ashp_boundary_mgnl,
ref1_name = "ashp_ref_ann_data1",
ref1_pdf = rnorm,
ref1_units = "kWh",
ref1_params = list(mean = 4161, sd = 233), # Reference electricity consumption is modeled with a normal distribution
ref2_name = "ashp_intv_ann_data2",
ref2_pdf = rnorm,
ref2_units = "therms",
ref2_params = list(mean = 603, sd = 11.3), # Reference natural gas consumption is modeled with a normal distribution
intv_name = "ashp_intv_factor",
intv_pdf = runif,
intv_params = list(min = 0.31, max = 0.47)) # Intervention factor, % savings, is modeled with a uniform distribution
# Calculate cumulative activity data
cumul_sum2("ashp_ref_data1", ashp_ref_ann_data1)
cumul_sum2("ashp_ref_data2", ashp_ref_ann_data2)
# Simulate annual energy consumption for space heating and cooling.
calc_ad2(boundary_df = ashp_boundary_mgnl,
ref1_name = "ashp_ref_ann_data1",
ref1_pdf = rnorm,
ref1_units = "kWh",
ref1_params = list(mean = 4161, sd = 233), # Reference electricity consumption is modeled with a normal distribution
ref2_name = "ashp_ref_ann_data2",
ref2_pdf = rnorm,
ref2_units = "therms",
ref2_params = list(mean = 603, sd = 11.3), # Reference natural gas consumption is modeled with a normal distribution
intv_name = "ashp_intv_factor",
intv_pdf = runif,
intv_params = list(min = 0.31, max = 0.47)) # Intervention factor, % savings, is modeled with a uniform distribution
# Calculate cumulative activity data
cumul_sum2("ashp_ref_data1", ashp_ref_ann_data1)
cumul_sum2("ashp_ref_data2", ashp_ref_ann_data2)
cumul_sum2("ashp_intv_data1", ashp_intv_ann_data1)
ashp_savings <- 1 - ashp_intv_factor[, -1]
ashp_intv_data1 <- ashp_ref_ann_data1[, -1] * ashp_savings
ashp_intv_data2 <- ashp_ref_ann_data2[, -1] * ashp_savings
View(ashp_intv_data1)
View(ashp_ref_ann_data1)
source("C:/Users/Brand/GitHub/GHG-measure-CBA-via-MCS/parameter_functions.R")
calc_intv("ashp_intv_data1", ashp_ref_ann_data1, ashp_intv_factor, "kwh")
View(ashp_intv_data1)
# Simulate reference scenario electricity consumption for space heating and cooling.
normal_PDF("ashp_ref_ann_data1", mean = 4161, sd = 233, "kWh")
# Simulate reference scenario natural gas consumption for space heating and cooling.
normal_PDF("ashp_ref_ann_data2", mean = 603, sd = 11.3, "therms")
# Simulate reference scenario electricity consumption for space heating and cooling.
normal_PDF("ashp_ref_ann_data1", mean = 4161, sd = 233, "kWh")
# Simulate reference scenario natural gas consumption for space heating and cooling.
normal_PDF("ashp_ref_ann_data2", mean = 603, sd = 11.3, "therms")
# Simulate intervention energy savings from ASHP upgrade
discrete_uniform1("ashp_intv_factor", minvalue = 0.31, maxvalue = 0.47, "% savings")
# Calculate intervention scenario energy consumption based on modeled savings
calc_intv("ashp_intv_data1", ashp_ref_ann_data1, ashp_intv_factor, "kwh")
calc_intv("ashp_intv_data2", ashp_ref_ann_data2, ashp_intv_factor, "therms")
# Calculate cumulative activity data based on scenario lifetime
cumul_sum2("ashp_ref_data1", ashp_ref_ann_data1)
# Calculate cumulative activity data based on scenario lifetime
cumul_sum2("ashp_ref_data1", ashp_ref_ann_data1)
cumul_sum2("ashp_ref_data2", ashp_ref_ann_data2)
cumul_sum2("ashp_intv_data1", ashp_intv_ann_data1)
# Calculate intervention scenario energy consumption based on modeled savings
calc_intv("ashp_intv_ann_data1", ashp_ref_ann_data1, ashp_intv_factor, "kwh")
calc_intv("ashp_intv_ann_data2", ashp_ref_ann_data2, ashp_intv_factor, "therms")
cumul_sum2("ashp_intv_data1", ashp_intv_ann_data1)
cumul_sum2("ashp_intv_data1", ashp_intv_ann_data1)
cumul_sum2("ashp_intv_data2", ashp_intv_ann_data2)
# ASHP Capex is calculated by simulating the installation costs for each home
discrete_uniform1("ashp_capex_factor1", minvalue = 2100, maxvalue = 6000, units = "USD")
ashp_intv_capex1 <- ashp_boundary_mgnl[, -1] * ashp_capex_factor1[, -1]
# Sum total Capex
ashp_intv_sumcapex <- ashp_intv_capex1
# ASHP electricity opex
static_value("ashp_kwh_price", value = 0.1542, units = "USD")
ashp_ref_opex1 <- ashp_ref_data1[, -1] * ashp_kwh_price[, -1]
ashp_intv_opex1 <- ashp_intv_data1[, -1] * ashp_kwh_price[, -1]
# ASHP therms opex
static_value("ashp_therm_price", value = 0.3434, units = "therms")
ashp_ref_opex2 <- ashp_ref_data2[, -1] * ashp_therm_price[, -1]
ashp_intv_opex2 <- ashp_intv_data2[, -1] * ashp_therm_price[, -1]
# Sum total opex
ashp_ref_sumopex <- ashp_ref_opex1 + ashp_ref_opex2
ashp_intv_sumopex <- ashp_intv_opex1 + ashp_intv_opex2
# Calculate scope 1 natural gas emissions
ghg_conversion1("ashp_ref_ghg_natgas",
"ashp_intv_ghg_natgas",
ashp_ref_data2,
ashp_intv_data2,
fltr.ef_activeyear = 2024,
fltr.service_type = "natural gas",
fltr.emission_category = "stationary",
fltr.emission_scope = "scope 1",
fltr.service_subcategory1 = "",
fltr.service_subcategory2 = "",
fltr.country = "global",
fltr.subregion = "")
# Calculate scope 2 electricity ghg emissions based on a simulation of grid emissions intensity
ghg_conversion2("ashp_ref_ghg_elec", "ashp_intv_ghg_elec", ef_sim_electricity, ashp_ref_data1, ashp_intv_data1)
# Calculate scope 3 supply chain ghg emissions based on a simulation of the upstream spend-based emission factor
ghg_conversion3("ashp_ref_ghg_upstream", "ashp_intv_ghg_upstream", ef_sim_appliances_upstream, ashp_ref_capex1, ashp_intv_capex1)
ashp_ref_capex1 <- ref_boundary_mgnl[, -1] * ashp_capex_factor1[, -1]
# Sum total Capex
ashp_intv_sumcapex <- ashp_intv_capex1
ashp_ref_sumcapex <- ashp_ref_capex1
source("C:/Users/Brand/GitHub/GHG-measure-CBA-via-MCS/parameter_functions.R")
# Calculate scope 3 supply chain ghg emissions based on a simulation of the upstream spend-based emission factor
ghg_conversion3("ashp_ref_ghg_upstream", "ashp_intv_ghg_upstream", ef_sim_appliances_upstream, ashp_ref_capex1, ashp_intv_capex1)
# Calculate total ashp GHG emissions
ashp_ref_ghg_total <- ashp_ref_ghg_natgas[, -1] + ashp_ref_ghg_elec[, -1] + ashp_ref_ghg_upstream[, -1]
ashp_intv_ghg_total <- ashp_intv_ghg_natgas[, -1] + ashp_intv_ghg_elec[, -1] + ashp_intv_ghg_upstream[, -1]
# Simulate reference scenario electricity consumption for space heating and cooling.
normal_PDF("ashp_ref_ann_data1", mean = 4161, sd = 233, "kWh")
# Simulate reference scenario natural gas consumption for space heating and cooling.
normal_PDF("ashp_ref_ann_data2", mean = 603, sd = 11.3, "therms")
# Simulate intervention energy savings from ASHP upgrade
discrete_uniform1("ashp_intv_factor", minvalue = 0.31, maxvalue = 0.47, "% savings")
# Calculate intervention scenario energy consumption based on modeled savings
calc_intv("ashp_intv_ann_data1", ashp_ref_ann_data1, ashp_intv_factor, "kwh")
calc_intv("ashp_intv_ann_data2", ashp_ref_ann_data2, ashp_intv_factor, "therms")
# Calculate cumulative activity data based on scenario lifetime
cumul_sum2("ashp_ref_data1", ashp_ref_ann_data1)
cumul_sum2("ashp_ref_data2", ashp_ref_ann_data2)
cumul_sum2("ashp_intv_data1", ashp_intv_ann_data1)
cumul_sum2("ashp_intv_data2", ashp_intv_ann_data2)
# ASHP Capex is calculated by simulating the installation costs for each home
discrete_uniform1("ashp_capex_factor1", minvalue = 2100, maxvalue = 6000, units = "USD")
ashp_intv_capex1 <- ashp_boundary_mgnl[, -1] * ashp_capex_factor1[, -1]
ashp_ref_capex1 <- ref_boundary_mgnl[, -1] * ashp_capex_factor1[, -1]
# Sum total Capex
ashp_intv_sumcapex <- ashp_intv_capex1
ashp_ref_sumcapex <- ashp_ref_capex1
# ASHP electricity opex
static_value("ashp_kwh_price", value = 0.1542, units = "USD")
ashp_ref_opex1 <- ashp_ref_data1[, -1] * ashp_kwh_price[, -1]
ashp_intv_opex1 <- ashp_intv_data1[, -1] * ashp_kwh_price[, -1]
# ASHP therms opex
static_value("ashp_therm_price", value = 0.3434, units = "therms")
ashp_ref_opex2 <- ashp_ref_data2[, -1] * ashp_therm_price[, -1]
ashp_intv_opex2 <- ashp_intv_data2[, -1] * ashp_therm_price[, -1]
# Sum total opex
ashp_ref_sumopex <- ashp_ref_opex1 + ashp_ref_opex2
ashp_intv_sumopex <- ashp_intv_opex1 + ashp_intv_opex2
# Calculate scope 1 natural gas emissions
ghg_conversion1("ashp_ref_ghg_natgas",
"ashp_intv_ghg_natgas",
ashp_ref_data2,
ashp_intv_data2,
fltr.ef_activeyear = 2024,
fltr.service_type = "natural gas",
fltr.emission_category = "stationary",
fltr.emission_scope = "scope 1",
fltr.service_subcategory1 = "",
fltr.service_subcategory2 = "",
fltr.country = "global",
fltr.subregion = "")
# Calculate scope 2 electricity ghg emissions based on a simulation of grid emissions intensity
ghg_conversion2("ashp_ref_ghg_elec", "ashp_intv_ghg_elec", ef_sim_electricity, ashp_ref_data1, ashp_intv_data1)
# Calculate scope 3 supply chain ghg emissions based on a simulation of the upstream spend-based emission factor
ghg_conversion3("ashp_ref_ghg_upstream", "ashp_intv_ghg_upstream", ef_sim_appliances_upstream, ashp_ref_capex1, ashp_intv_capex1)
# Calculate total ashp GHG emissions
ashp_ref_ghg_total <- ashp_ref_ghg_natgas[, -1] + ashp_ref_ghg_elec[, -1] + ashp_ref_ghg_upstream[, -1]
ashp_intv_ghg_total <- ashp_intv_ghg_natgas[, -1] + ashp_intv_ghg_elec[, -1] + ashp_intv_ghg_upstream[, -1]
# Reference boundary represents zero energy efficiency upgrades in each year
static_value("ref_boundary_mgnl", 0, units = "project count")
# Intervention boundary is modeled as a random value between 120 and 160.
# The program is assumed to have funding for 10 years. After that, no more homes are funded.
discrete_uniform3("intv_boundary_mgnl", minvalue = 120, maxvalue = 160, nyears = intv_years, value2 = 0, units = "project count")
# Project types are randomly assigned for the intervention boundary, with three new dataframes for each project type.
assign_projecttype(intv_boundary_mgnl)
# Energy Prices
static_value("kwh_price", value = 0.1542, units = "USD")
static_value("therm_price", value = 0.3434, units = "therms")
# Simulate reference scenario electricity consumption for space heating and cooling.
normal_PDF("ashp_ref_ann_data1", mean = 4161, sd = 233, "kWh")
# Simulate reference scenario natural gas consumption for space heating and cooling.
normal_PDF("ashp_ref_ann_data2", mean = 603, sd = 11.3, "therms")
# Simulate intervention energy savings from ASHP upgrade
discrete_uniform1("ashp_intv_factor", minvalue = 0.31, maxvalue = 0.47, "% savings")
# Calculate intervention scenario energy consumption based on modeled savings
calc_intv("ashp_intv_ann_data1", ashp_ref_ann_data1, ashp_intv_factor, "kwh")
calc_intv("ashp_intv_ann_data2", ashp_ref_ann_data2, ashp_intv_factor, "therms")
# Calculate cumulative activity data based on scenario lifetime
cumul_sum2("ashp_ref_data1", ashp_ref_ann_data1)
cumul_sum2("ashp_ref_data2", ashp_ref_ann_data2)
cumul_sum2("ashp_intv_data1", ashp_intv_ann_data1)
cumul_sum2("ashp_intv_data2", ashp_intv_ann_data2)
# ASHP Capex is calculated by simulating the installation costs for each home
discrete_uniform1("ashp_capex_factor1", minvalue = 2100, maxvalue = 6000, units = "USD")
ashp_intv_capex1 <- ashp_boundary_mgnl[, -1] * ashp_capex_factor1[, -1]
ashp_ref_capex1 <- ref_boundary_mgnl[, -1] * ashp_capex_factor1[, -1]
# Sum total Capex
ashp_intv_sumcapex <- ashp_intv_capex1
ashp_ref_sumcapex <- ashp_ref_capex1
# ASHP electricity opex
ashp_ref_opex1 <- ashp_ref_data1[, -1] * kwh_price[, -1]
ashp_intv_opex1 <- ashp_intv_data1[, -1] * kwh_price[, -1]
# ASHP therms opex
ashp_ref_opex2 <- ashp_ref_data2[, -1] * therm_price[, -1]
ashp_intv_opex2 <- ashp_intv_data2[, -1] * therm_price[, -1]
# Sum total opex
ashp_ref_sumopex <- ashp_ref_opex1 + ashp_ref_opex2
ashp_intv_sumopex <- ashp_intv_opex1 + ashp_intv_opex2
# Calculate scope 1 natural gas emissions
ghg_conversion1("ashp_ref_ghg_natgas",
"ashp_intv_ghg_natgas",
ashp_ref_data2,
ashp_intv_data2,
fltr.ef_activeyear = 2024,
fltr.service_type = "natural gas",
fltr.emission_category = "stationary",
fltr.emission_scope = "scope 1",
fltr.service_subcategory1 = "",
fltr.service_subcategory2 = "",
fltr.country = "global",
fltr.subregion = "")
# Calculate scope 2 electricity ghg emissions based on a simulation of grid emissions intensity
ghg_conversion2("ashp_ref_ghg_elec", "ashp_intv_ghg_elec", ef_sim_electricity, ashp_ref_data1, ashp_intv_data1)
# Calculate scope 3 supply chain ghg emissions based on a simulation of the upstream spend-based emission factor
ghg_conversion3("ashp_ref_ghg_upstream", "ashp_intv_ghg_upstream", ef_sim_appliances_upstream, ashp_ref_capex1, ashp_intv_capex1)
# Calculate total ashp GHG emissions
ashp_ref_ghg_total <- ashp_ref_ghg_natgas[, -1] + ashp_ref_ghg_elec[, -1] + ashp_ref_ghg_upstream[, -1]
ashp_intv_ghg_total <- ashp_intv_ghg_natgas[, -1] + ashp_intv_ghg_elec[, -1] + ashp_intv_ghg_upstream[, -1]
View(ashp_intv_factor)
# Simulate intervention energy savings from ASHP upgrade
discrete_uniform1("ashp_intv_factor", minvalue = 0.31, maxvalue = 0.47, "% savings")
# Simulate intervention energy savings from ASHP upgrade
continous_uniform1("ashp_intv_factor", minvalue = 0.31, maxvalue = 0.47, "% savings")
source("C:/Users/Brand/GitHub/GHG-measure-CBA-via-MCS/parameter_functions.R")
# Simulate intervention energy savings from ASHP upgrade
cont_uniform1("ashp_intv_factor", minvalue = 0.31, maxvalue = 0.47, "% savings")
# Simulate reference scenario electricity consumption for space heating and cooling.
normal_PDF("ashp_ref_ann_data1", mean = 4161, sd = 233, "kWh")
# Simulate reference scenario natural gas consumption for space heating and cooling.
normal_PDF("ashp_ref_ann_data2", mean = 603, sd = 11.3, "therms")
# Simulate intervention energy savings from ASHP upgrade
cont_uniform1("ashp_intv_factor", minvalue = 0.31, maxvalue = 0.47, "% savings")
# Calculate intervention scenario energy consumption based on modeled savings
calc_intv("ashp_intv_ann_data1", ashp_ref_ann_data1, ashp_intv_factor, "kwh")
calc_intv("ashp_intv_ann_data2", ashp_ref_ann_data2, ashp_intv_factor, "therms")
# Calculate cumulative activity data based on scenario lifetime
cumul_sum2("ashp_ref_data1", ashp_ref_ann_data1)
cumul_sum2("ashp_ref_data2", ashp_ref_ann_data2)
cumul_sum2("ashp_intv_data1", ashp_intv_ann_data1)
cumul_sum2("ashp_intv_data2", ashp_intv_ann_data2)
# ASHP Capex is calculated by simulating the installation costs for each home
discrete_uniform1("ashp_capex_factor1", minvalue = 2100, maxvalue = 6000, units = "USD")
ashp_intv_capex1 <- ashp_boundary_mgnl[, -1] * ashp_capex_factor1[, -1]
ashp_ref_capex1 <- ref_boundary_mgnl[, -1] * ashp_capex_factor1[, -1]
# Sum total Capex
ashp_intv_sumcapex <- ashp_intv_capex1
ashp_ref_sumcapex <- ashp_ref_capex1
# ASHP electricity opex
ashp_ref_opex1 <- ashp_ref_data1[, -1] * kwh_price[, -1]
ashp_intv_opex1 <- ashp_intv_data1[, -1] * kwh_price[, -1]
# ASHP therms opex
ashp_ref_opex2 <- ashp_ref_data2[, -1] * therm_price[, -1]
ashp_intv_opex2 <- ashp_intv_data2[, -1] * therm_price[, -1]
# Sum total opex
ashp_ref_sumopex <- ashp_ref_opex1 + ashp_ref_opex2
ashp_intv_sumopex <- ashp_intv_opex1 + ashp_intv_opex2
# Calculate scope 1 natural gas emissions
ghg_conversion1("ashp_ref_ghg_natgas",
"ashp_intv_ghg_natgas",
ashp_ref_data2,
ashp_intv_data2,
fltr.ef_activeyear = 2024,
fltr.service_type = "natural gas",
fltr.emission_category = "stationary",
fltr.emission_scope = "scope 1",
fltr.service_subcategory1 = "",
fltr.service_subcategory2 = "",
fltr.country = "global",
fltr.subregion = "")
# Calculate scope 2 electricity ghg emissions based on a simulation of grid emissions intensity
ghg_conversion2("ashp_ref_ghg_elec", "ashp_intv_ghg_elec", ef_sim_electricity, ashp_ref_data1, ashp_intv_data1)
# Calculate scope 3 supply chain ghg emissions based on a simulation of the upstream spend-based emission factor
ghg_conversion3("ashp_ref_ghg_upstream", "ashp_intv_ghg_upstream", ef_sim_appliances_upstream, ashp_ref_capex1, ashp_intv_capex1)
# Calculate total ashp GHG emissions
ashp_ref_ghg_total <- ashp_ref_ghg_natgas[, -1] + ashp_ref_ghg_elec[, -1] + ashp_ref_ghg_upstream[, -1]
ashp_intv_ghg_total <- ashp_intv_ghg_natgas[, -1] + ashp_intv_ghg_elec[, -1] + ashp_intv_ghg_upstream[, -1]
View(ashp_intv_ann_data1)
static_value("ashp_therm_price", value = 0.3434, units = "therms")
system("git rm --cached *.RData")
system("git commit -m 'Remove .RData from tracking'")
system("git check-ignore -v yourfile.RData")
system("git add .gitignore")
system("git commit -m 'Update .gitignore to ignore .RData'")
system("git push")
system("git rm --cached *.RData")
