calc_ad1("ashp_ref_ann_data2",
"ashp_intv_ann_data2",
ashp_boundary_mgnl,
ref_pdf = rnorm,
ref_params = list(mean = 603, sd = 11.3), # Reference natural gas consumption is modeled with a normal distribution
intv_pdf = runif,
intv_params = list(min = 0.31, max = 0.47), # Intervention factor, % savings,is modeled with a uniform distribution
units = "therms")
# Calculate cumulative activity data
cumul_sum("ashp_ref_data2", ashp_ref_ann_data2)
cumul_sum("ashp_intv_data2", ashp_intv_ann_data2)
# ASHP Capex is calculated by simulating the installation costs for each home
calculate_capex("ashp_ref_capex1", "ashp_intv_capex1", ref_boundary_mgnl, ashp_boundary_mgnl, capex_min = 2100, capex_max = 6000, units = "USD")
# Sum total Capex
ashp_ref_sumcapex <- ashp_ref_capex1[,-1]
ashp_intv_sumcapex <- ashp_intv_capex1[,-1]
# ASHP Opex is calculated for electricity and natural gas separately, based on current energy prices
calculate_opex("ashp_ref_opex1", "ashp_intv_opex1", ashp_ref_data1, ashp_intv_data1, opex = 0.1542, units = "USD")
calculate_opex("ashp_ref_opex2", "ashp_intv_opex2", ashp_ref_data2, ashp_intv_data2, opex = 0.3434, units = "therms")
# Sum total opex
ashp_ref_sumopex <- ashp_ref_opex1[,-1] + ashp_ref_opex2[,-1]
ashp_intv_sumopex <- ashp_intv_opex1[,-1] + ashp_intv_opex2[,-1]
# Calculate scope 1 natural gas emissions
ghg_conversion1("ashp_ref_ghg_natgas",
"ashp_intv_ghg_natgas",
ashp_ref_data2,
ashp_intv_data2,
fltr.ef_activeyear = 2024,
fltr.service_type = "natural gas",
fltr.emission_category = "stationary",
fltr.emission_scope = "scope 1",
fltr.service_subcategory1 = "",
fltr.service_subcategory2 = "",
fltr.country = "global",
fltr.subregion = "")
# Calculate scope 2 electricity ghg emissions based on a simulation of grid emissions intensity
ghg_conversion2("ashp_ref_ghg_elec", "ashp_intv_ghg_elec", ef_sim_electricity, ashp_ref_data1, ashp_intv_data1)
# Electricity emission factor
scenario_MCS("ef_sim_electricity", sheet_name = "electricity_ef", units = "kgco2e/kWh")
# Supply Chain emission factor
continuous_uniform2("ef_sim_appliances_upstream", minvalue = 0.079, maxvalue = 0.161, units = "kgco2e/USD")
continuous_uniform2("ef_sim_weatherize_upstream", minvalue = 0.082, maxvalue = 0.208, units = "kgco2e/USD")
# Simulate annual electricity consumption for space heating and cooling. Each home in the boundary is simulated individually. The intervention factor is the % energy savings, also simulated for each home in the boundary.
calc_ad1("ashp_ref_ann_data1",
"ashp_intv_ann_data1",
ashp_boundary_mgnl,
ref_pdf = rnorm,
ref_params = list(mean = 4161, sd = 233), # Reference electricity consumption is modeled with a normal distribution
intv_pdf = runif,
intv_params = list(min = 0.31, max = 0.47), # Intervention factor, % savings, is modeled with a uniform distribution
units = "kWh")
# Calculate cumulative activity data
cumul_sum("ashp_ref_data1", ashp_ref_ann_data1)
cumul_sum("ashp_intv_data1", ashp_intv_ann_data1)
# Simulate annual natural gas consumption for space heating. Each home in the boundary is simulated individually. The intervention factor is the % energy savings, also simulated for each home in the boundary.
calc_ad1("ashp_ref_ann_data2",
"ashp_intv_ann_data2",
ashp_boundary_mgnl,
ref_pdf = rnorm,
ref_params = list(mean = 603, sd = 11.3), # Reference natural gas consumption is modeled with a normal distribution
intv_pdf = runif,
intv_params = list(min = 0.31, max = 0.47), # Intervention factor, % savings,is modeled with a uniform distribution
units = "therms")
# Calculate cumulative activity data
cumul_sum("ashp_ref_data2", ashp_ref_ann_data2)
cumul_sum("ashp_intv_data2", ashp_intv_ann_data2)
# ASHP Capex is calculated by simulating the installation costs for each home
calculate_capex("ashp_ref_capex1", "ashp_intv_capex1", ref_boundary_mgnl, ashp_boundary_mgnl, capex_min = 2100, capex_max = 6000, units = "USD")
# Sum total Capex
ashp_ref_sumcapex <- ashp_ref_capex1[,-1]
ashp_intv_sumcapex <- ashp_intv_capex1[,-1]
# ASHP Opex is calculated for electricity and natural gas separately, based on current energy prices
calculate_opex("ashp_ref_opex1", "ashp_intv_opex1", ashp_ref_data1, ashp_intv_data1, opex = 0.1542, units = "USD")
calculate_opex("ashp_ref_opex2", "ashp_intv_opex2", ashp_ref_data2, ashp_intv_data2, opex = 0.3434, units = "therms")
# Sum total opex
ashp_ref_sumopex <- ashp_ref_opex1[,-1] + ashp_ref_opex2[,-1]
ashp_intv_sumopex <- ashp_intv_opex1[,-1] + ashp_intv_opex2[,-1]
# Calculate scope 1 natural gas emissions
ghg_conversion1("ashp_ref_ghg_natgas",
"ashp_intv_ghg_natgas",
ashp_ref_data2,
ashp_intv_data2,
fltr.ef_activeyear = 2024,
fltr.service_type = "natural gas",
fltr.emission_category = "stationary",
fltr.emission_scope = "scope 1",
fltr.service_subcategory1 = "",
fltr.service_subcategory2 = "",
fltr.country = "global",
fltr.subregion = "")
# Calculate scope 2 electricity ghg emissions based on a simulation of grid emissions intensity
ghg_conversion2("ashp_ref_ghg_elec", "ashp_intv_ghg_elec", ef_sim_electricity, ashp_ref_data1, ashp_intv_data1)
# Calculate scope 3 supply chain ghg emissions based on a simulation of the upstream spend-based emission factor
ghg_conversion3("ashp_ref_ghg_upstream", "ashp_intv_ghg_upstream", ef_sim_appliances_upstream, ashp_ref_capex1, ashp_intv_capex1)
# Calculate total ashp GHG emissions
ashp_ref_ghg_total <- ashp_ref_ghg_natgas[, -1] + ashp_ref_ghg_elec[, -1] + ashp_ref_ghg_upstream[, -1]
ashp_intv_ghg_total <- ashp_intv_ghg_natgas[, -1] + ashp_intv_ghg_elec[, -1] + ashp_intv_ghg_upstream[, -1]
View(ashp_intv_data1)
View(ashp_boundary)
View(ashp_boundary_mgnl)
# Define the following global variables to be called by parameter functions
run_count <- 1000
scenario_start <- 2026
scenario_end  <- 2050
scenario_years <- scenario_end - scenario_start + 1
intv_years <- 10
output_headers <- scenario_start:scenario_end
# Define the following global variables to be called by parameter functions
run_count <- 1000
scenario_start <- 2026
scenario_end  <- 2050
scenario_years <- scenario_end - scenario_start + 1
intv_years <- 10
output_headers <- scenario_start:scenario_end
source("parameter_functions.r")
EFL_co2e("ar6")
write_xlsx(EFL, path = "EFLco2e.xlsx")
source("C:/Users/Brand/GitHub/GHG-measure-CBA-via-MCS/parameter_functions.R")
# Electricity emission factor
scenario_MCS("ef_sim_electricity", sheet_name = "electricity_ef", units = "kgco2e/kWh")
# Supply Chain emission factor
continuous_uniform2("ef_sim_appliances_upstream", minvalue = 0.079, maxvalue = 0.161, units = "kgco2e/USD")
continuous_uniform2("ef_sim_weatherize_upstream", minvalue = 0.082, maxvalue = 0.208, units = "kgco2e/USD")
# Reference boundary represents zero energy efficiency upgrades in each year
static_value("ref_boundary_mgnl", 0, units = "project count")
# Intervention boundary is modeled as a random value between 120 and 160.
# The program is assumed to have funding for 10 years. After that, no more homes are funded.
discrete_uniform3("intv_boundary_mgnl", minvalue = 120, maxvalue = 160, nyears = intv_years, value2 = 0, units = "project count")
# Project types are randomly assigned for the intervention boundary, with three new dataframes for each project type.
assign_projecttype(intv_boundary_mgnl)
# Calculate cumulative project counts for each project type
cumul_sum("ashp_boundary", ashp_boundary_mgnl)
cumul_sum("weatherize_boundary", weatherize_boundary_mgnl)
cumul_sum("hpwh_boundary", hpwh_boundary_mgnl)
View(ashp_boundary)
# Define the following global variables to be called by parameter functions
run_count <- 1000
scenario_start <- 2026
intv_years <- 10
intv_lifetime <- 15
scenario_end  <- intv_years + intv_lifetime - 1
scenario_end  <- scenario_start + intv_years + intv_lifetime - 1
# Define the following global variables to be called by parameter functions
run_count <- 1000
scenario_start <- 2026
intv_years <- 10 # The number of years the intervention will be implemented
intv_lifetime <- 15 # The number of years the intervention generates benefits, generally the expected lifetime of equipment
scenario_end  <- scenario_start + intv_years + intv_lifetime - 1
scenario_years <- scenario_end - scenario_start + 1
output_headers <- scenario_start:scenario_end
source("C:/Users/Brand/GitHub/GHG-measure-CBA-via-MCS/parameter_functions.R")
if (!require("dplyr")) install.packages("dplyr")
library(dplyr)
if (!require("readxl")) install.packages("readxl")
library(readxl)
if (!require("writexl")) install.packages("writexl")
library(writexl)
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if (!require("scales")) install.packages("scales")
library(scales)
if (!require("data.table")) install.packages("data.table")
library(data.table)
# Define the following global variables to be called by parameter functions
run_count <- 1000
scenario_start <- 2026
intv_years <- 10 # The number of years the intervention will be implemented
intv_lifetime <- 15 # The number of years the intervention generates benefits, generally the expected lifetime of equipment
scenario_end  <- scenario_start + intv_years + intv_lifetime - 1
scenario_years <- scenario_end - scenario_start + 1
output_headers <- scenario_start:scenario_end
source("parameter_functions.r")
EFL_co2e("ar6")
write_xlsx(EFL, path = "EFLco2e.xlsx")
# Electricity emission factor
scenario_MCS("ef_sim_electricity", sheet_name = "electricity_ef", units = "kgco2e/kWh")
# Supply Chain emission factor
continuous_uniform2("ef_sim_appliances_upstream", minvalue = 0.079, maxvalue = 0.161, units = "kgco2e/USD")
continuous_uniform2("ef_sim_weatherize_upstream", minvalue = 0.082, maxvalue = 0.208, units = "kgco2e/USD")
# Reference boundary represents zero energy efficiency upgrades in each year
static_value("ref_boundary_mgnl", 0, units = "project count")
# Intervention boundary is modeled as a random value between 120 and 160.
# The program is assumed to have funding for 10 years. After that, no more homes are funded.
discrete_uniform3("intv_boundary_mgnl", minvalue = 120, maxvalue = 160, nyears = intv_years, value2 = 0, units = "project count")
# Project types are randomly assigned for the intervention boundary, with three new dataframes for each project type.
assign_projecttype(intv_boundary_mgnl)
# Simulate annual electricity consumption for space heating and cooling. Each home in the boundary is simulated individually. The intervention factor is the % energy savings, also simulated for each home in the boundary.
calc_ad1("ashp_ref_ann_data1",
"ashp_intv_ann_data1",
ashp_boundary_mgnl,
ref_pdf = rnorm,
ref_params = list(mean = 4161, sd = 233), # Reference electricity consumption is modeled with a normal distribution
intv_pdf = runif,
intv_params = list(min = 0.31, max = 0.47), # Intervention factor, % savings, is modeled with a uniform distribution
units = "kWh")
# Calculate cumulative activity data
cumul_sum("ashp_ref_data1", ashp_ref_ann_data1)
cumul_sum("ashp_intv_data1", ashp_intv_ann_data1)
# Simulate annual natural gas consumption for space heating. Each home in the boundary is simulated individually. The intervention factor is the % energy savings, also simulated for each home in the boundary.
calc_ad1("ashp_ref_ann_data2",
"ashp_intv_ann_data2",
ashp_boundary_mgnl,
ref_pdf = rnorm,
ref_params = list(mean = 603, sd = 11.3), # Reference natural gas consumption is modeled with a normal distribution
intv_pdf = runif,
intv_params = list(min = 0.31, max = 0.47), # Intervention factor, % savings,is modeled with a uniform distribution
units = "therms")
# Calculate cumulative activity data
cumul_sum("ashp_ref_data2", ashp_ref_ann_data2)
cumul_sum("ashp_intv_data2", ashp_intv_ann_data2)
# ASHP Capex is calculated by simulating the installation costs for each home
calculate_capex("ashp_ref_capex1", "ashp_intv_capex1", ref_boundary_mgnl, ashp_boundary_mgnl, capex_min = 2100, capex_max = 6000, units = "USD")
# Sum total Capex
ashp_ref_sumcapex <- ashp_ref_capex1[,-1]
ashp_intv_sumcapex <- ashp_intv_capex1[,-1]
# ASHP Opex is calculated for electricity and natural gas separately, based on current energy prices
calculate_opex("ashp_ref_opex1", "ashp_intv_opex1", ashp_ref_data1, ashp_intv_data1, opex = 0.1542, units = "USD")
calculate_opex("ashp_ref_opex2", "ashp_intv_opex2", ashp_ref_data2, ashp_intv_data2, opex = 0.3434, units = "therms")
# Sum total opex
ashp_ref_sumopex <- ashp_ref_opex1[,-1] + ashp_ref_opex2[,-1]
ashp_intv_sumopex <- ashp_intv_opex1[,-1] + ashp_intv_opex2[,-1]
# Calculate scope 1 natural gas emissions
ghg_conversion1("ashp_ref_ghg_natgas",
"ashp_intv_ghg_natgas",
ashp_ref_data2,
ashp_intv_data2,
fltr.ef_activeyear = 2024,
fltr.service_type = "natural gas",
fltr.emission_category = "stationary",
fltr.emission_scope = "scope 1",
fltr.service_subcategory1 = "",
fltr.service_subcategory2 = "",
fltr.country = "global",
fltr.subregion = "")
# Calculate scope 2 electricity ghg emissions based on a simulation of grid emissions intensity
ghg_conversion2("ashp_ref_ghg_elec", "ashp_intv_ghg_elec", ef_sim_electricity, ashp_ref_data1, ashp_intv_data1)
# Calculate scope 3 supply chain ghg emissions based on a simulation of the upstream spend-based emission factor
ghg_conversion3("ashp_ref_ghg_upstream", "ashp_intv_ghg_upstream", ef_sim_appliances_upstream, ashp_ref_capex1, ashp_intv_capex1)
# Calculate total ashp GHG emissions
ashp_ref_ghg_total <- ashp_ref_ghg_natgas[, -1] + ashp_ref_ghg_elec[, -1] + ashp_ref_ghg_upstream[, -1]
ashp_intv_ghg_total <- ashp_intv_ghg_natgas[, -1] + ashp_intv_ghg_elec[, -1] + ashp_intv_ghg_upstream[, -1]
# Simulate annual electricity consumption for space heating and cooling. Each home in the boundary is simulated individually. The intervention factor is the % energy savings, also simulated for each home in the boundary.
calc_ad1("weatherize_ref_ann_data1",
"weatherize_intv_ann_data1",
weatherize_boundary_mgnl,
ref_pdf = rnorm,
ref_params = list(mean = 4161, sd = 233), # Reference electricity consumption is modeled with a normal distribution
intv_pdf = runif,
intv_params = list(min = 0.10, max = 0.20), # Intervention factor, % savings, is modeled with a uniform distribution
units = "kWh")
# Calculate cumulative activity data
cumul_sum("weatherize_ref_data1", weatherize_ref_ann_data1)
cumul_sum("weatherize_intv_data1", weatherize_intv_ann_data1)
# Simulate annual natural gas consumption for space heating. Each home in the boundary is simulated individually. The intervention factor is the % energy savings, also simulated for each home in the boundary.
calc_ad1("weatherize_ref_ann_data2",
"weatherize_intv_ann_data2",
weatherize_boundary_mgnl,
ref_pdf = rnorm,
ref_params = list(mean = 603, sd = 11.3), # Reference natural gas consumption is modeled with a normal distribution
intv_pdf = runif,
intv_params = list(min = 0.10, max = 0.20), # Intervention factor, % savings,is modeled with a uniform distribution
units = "therms")
# Calculate cumulative activity data
cumul_sum("weatherize_ref_data2", weatherize_ref_ann_data2)
cumul_sum("weatherize_intv_data2", weatherize_intv_ann_data2)
# Weatherization Capex is calculated by simulating the installation costs for each home
calculate_capex("weatherize_ref_capex1", "weatherize_intv_capex1", ref_boundary_mgnl, weatherize_boundary_mgnl, capex_min = 1879, capex_max = 2962, units = "USD")
# Sum total Capex
weatherize_ref_sumcapex <- weatherize_ref_capex1[,-1]
weatherize_intv_sumcapex <- weatherize_intv_capex1[,-1]
# Weatherization Opex is calculated for electricity and natural gas separately, based on current energy prices
calculate_opex("weatherize_ref_opex1", "weatherize_intv_opex1", weatherize_ref_data1, weatherize_intv_data1, opex = 0.1542, units = "USD")
calculate_opex("weatherize_ref_opex2", "weatherize_intv_opex2", weatherize_ref_data2, weatherize_intv_data2, opex = 0.3434, units = "therms")
# Sum total Opex
weatherize_ref_sumopex <- weatherize_ref_opex1[,-1] + weatherize_ref_opex2[,-1]
weatherize_intv_sumopex <- weatherize_intv_opex1[,-1] + weatherize_intv_opex2[,-1]
# Calculate scope 1 natural gas emissions
ghg_conversion1("weatherize_ref_ghg_natgas",
"weatherize_intv_ghg_natgas",
weatherize_ref_data2,
weatherize_intv_data2,
fltr.ef_activeyear = 2024,
fltr.service_type = "natural gas",
fltr.emission_category = "stationary",
fltr.emission_scope = "scope 1",
fltr.service_subcategory1 = "",
fltr.service_subcategory2 = "",
fltr.country = "global",
fltr.subregion = "")
# Calculate scope 2 electricity ghg emissions based on a simulation of grid emissions intensity
ghg_conversion2("weatherize_ref_ghg_elec", "weatherize_intv_ghg_elec", ef_sim_electricity, weatherize_ref_data1, weatherize_intv_data1)
# Calculate scope 3 supply chain ghg emissions based on a simulation of the upstream spend-based emission factor
ghg_conversion3("weatherize_ref_ghg_upstream", "weatherize_intv_ghg_upstream", ef_sim_weatherize_upstream, weatherize_ref_capex1, weatherize_intv_capex1)
# Calculate total weatherize GHG emissions
weatherize_ref_ghg_total <- weatherize_ref_ghg_natgas[, -1] + weatherize_ref_ghg_elec[, -1] + weatherize_ref_ghg_upstream[, -1]
weatherize_intv_ghg_total <- weatherize_intv_ghg_natgas[, -1] + weatherize_intv_ghg_elec[, -1] + weatherize_intv_ghg_upstream[, -1]
# Simulate annual electricity consumption for water heating. Each home in the boundary is simulated individually. The intervention factor is the % energy savings, also simulated for each home in the boundary.
calc_ad1("hpwh_ref_ann_data1",
"hpwh_intv_ann_data1",
hpwh_boundary_mgnl,
ref_pdf = rnorm,
ref_params = list(mean = 2969, sd = 108.1), # Reference electricity consumption is modeled with a normal distribution
intv_pdf = runif,
intv_params = list(min = 0.30, max = 0.70), # Intervention factor, % savings, is modeled with a uniform distribution
units = "kWh")
# Calculate cumulative activity data
cumul_sum("hpwh_ref_data1", hpwh_ref_ann_data1)
cumul_sum("hpwh_intv_data1", hpwh_intv_ann_data1)
# Simulate annual natural gas consumption for space heating. Each home in the boundary is simulated individually. The intervention factor is the % energy savings, also simulated for each home in the boundary.
calc_ad1("hpwh_ref_ann_data2",
"hpwh_intv_ann_data2",
hpwh_boundary_mgnl,
ref_pdf = rnorm,
ref_params = list(mean = 237, sd = 4), # Reference natural gas consumption is modeled with a normal distribution
intv_pdf = runif,
intv_params = list(min = 0.30, max = 0.70), # Intervention factor, % savings,is modeled with a uniform distribution
units = "therms")
# Calculate cumulative activity data
cumul_sum("hpwh_ref_data2", hpwh_ref_ann_data2)
cumul_sum("hpwh_intv_data2", hpwh_intv_ann_data2)
# HPWH Capex is calculated by simulating the installation costs for each home
calculate_capex("hpwh_ref_capex1", "hpwh_intv_capex1", ref_boundary_mgnl, hpwh_boundary_mgnl, capex_min = 1300, capex_max = 2900, units = "USD")
# Sum total Capex
hpwh_ref_sumcapex <- hpwh_ref_capex1[,-1]
hpwh_intv_sumcapex <- hpwh_intv_capex1[,-1]
# HPWH Opex is calculated for electricity and natural gas separately, based on current energy prices
calculate_opex("hpwh_ref_opex1", "hpwh_intv_opex1", hpwh_ref_data1, hpwh_intv_data1, opex = 0.1542, units = "USD")
calculate_opex("hpwh_ref_opex2", "hpwh_intv_opex2", hpwh_ref_data2, hpwh_intv_data2, opex = 0.3434, units = "therms")
# Sum total Opex
hpwh_ref_sumopex <- hpwh_ref_opex1[,-1] + hpwh_ref_opex2[,-1]
hpwh_intv_sumopex <- hpwh_intv_opex1[,-1] + hpwh_intv_opex2[,-1]
# Calculate scope 1 natural gas emissions
ghg_conversion1("hpwh_ref_ghg_natgas",
"hpwh_intv_ghg_natgas",
hpwh_ref_data2,
hpwh_intv_data2,
fltr.ef_activeyear = 2024,
fltr.service_type = "natural gas",
fltr.emission_category = "stationary",
fltr.emission_scope = "scope 1",
fltr.service_subcategory1 = "",
fltr.service_subcategory2 = "",
fltr.country = "global",
fltr.subregion = "")
# Calculate scope 2 electricity ghg emissions based on a simulation of grid emissions intensity
ghg_conversion2("hpwh_ref_ghg_elec", "hpwh_intv_ghg_elec", ef_sim_electricity, hpwh_ref_data1, hpwh_intv_data1)
# Calculate scope 3 supply chain ghg emissions based on a simulation of the upstream spend-based emission factor
ghg_conversion3("hpwh_ref_ghg_upstream", "hpwh_intv_ghg_upstream", ef_sim_appliances_upstream, hpwh_ref_capex1, hpwh_intv_capex1)
# Calculate total HPWH GHG emissions
hpwh_ref_ghg_total <- hpwh_ref_ghg_natgas[, -1] + hpwh_ref_ghg_elec[, -1] + hpwh_ref_ghg_upstream[, -1]
hpwh_intv_ghg_total <- hpwh_intv_ghg_natgas[, -1] + hpwh_intv_ghg_elec[, -1] + hpwh_intv_ghg_upstream[, -1]
# calculate total reference GHG emissions
ref_ghg_total <- (ashp_ref_ghg_total + weatherize_ref_ghg_total + hpwh_ref_ghg_total)/1000
ref_ghg_total <- ref_ghg_total %>%
mutate(unit = "mtco2e") %>%
select(unit, everything())
# calculate total intervention GHG emissions
intv_ghg_total <- (ashp_intv_ghg_total + weatherize_intv_ghg_total + hpwh_intv_ghg_total)/1000
intv_ghg_total <- intv_ghg_total %>%
mutate(unit = "mtco2e") %>%  #
select(unit, everything())
# Calculate GHG mitigation
ghg_mitigation <- ref_ghg_total[, -1] - intv_ghg_total[, -1]
ghg_mitigation <- ghg_mitigation %>%
mutate(unit = "mtco2e") %>%
select(unit, everything())
# Calculate total reference scenario costs
ref_opex_total <- ashp_ref_sumopex + weatherize_ref_sumopex + hpwh_ref_sumopex
ref_capex_total <- ashp_ref_sumcapex + weatherize_ref_sumcapex + hpwh_ref_sumcapex
ref_costs_econ <- ref_opex_total + ref_capex_total
# Calculate total intervention scenario costs
intv_opex_total <- ashp_intv_sumopex + weatherize_intv_sumopex + hpwh_intv_sumopex
intv_capex_total <- ashp_intv_sumcapex + weatherize_intv_sumcapex + hpwh_intv_sumcapex
intv_costs_econ <- intv_opex_total + intv_capex_total
# Social cost of carbon (SCC) is modeled as a normal distribution. It's modeled as an avoided cost, so a positive value is used.
# mean = $185 sd = $85.7
# The selected value for each simulation is applied consistently over the scenario lifetime.
normal_PDF("coben1_sim", 185, 85.7, units = "USD/mtco2e")
# The function above leads to negative values for the social cost of carbon. In practice, this does not make sense. So negative values are converted to 0 below
coben1_sim[coben1_sim < 0] <- 0
# Calculate social value from Parameter 1 co-benefits
coben1_value <- ghg_mitigation[, -1] * coben1_sim[, -1]
coben1_value <- coben1_value %>%
mutate(unit = "social value of avoided carbon (USD)") %>%
select(unit, everything())
coben_value_trim <- coben1_value[, -1]
# Calculate cashflow
cashflow_investment <- intv_capex_total - ref_capex_total # Assuming capex costs = investment costs
cashflow_opex <- intv_opex_total - ref_opex_total
cashflow_econ <- intv_costs_econ - ref_costs_econ
cashflow_social <- cashflow_econ + coben_value_trim
cashflow_private <- cashflow_econ # This is a space holder for now. This could use the average rebate coverage to calculate cost to city of Flag
ashp_outputlist <- (list("ashp_boundary_mgnl" = ashp_boundary_mgnl,
"ashp_ref_ann_data1" = ashp_ref_ann_data1,
"ashp_ref_ann_data2" = ashp_ref_ann_data2,
"ashp_ref_data1" = ashp_ref_data1,
"ashp_ref_data2" = ashp_ref_data2,
"ashp_ref_ghg_elec" = ashp_ref_ghg_elec,
"ashp_ref_ghg_natgas" = ashp_ref_ghg_natgas,
"ashp_ref_ghg_total" = ashp_ref_ghg_total,
"ashp_ref_ghg_upstream" = ashp_ref_ghg_upstream,
"ashp_ref_capex1" = ashp_ref_capex1,
"ashp_ref_opex1" = ashp_ref_opex1,
"ashp_ref_opex2" = ashp_ref_opex2,
"ashp_ref_sumcapex" = ashp_ref_sumcapex,
"ashp_ref_sumopex" = ashp_ref_sumopex,
"ashp_intv_ann_data1" = ashp_intv_ann_data1,
"ashp_intv_ann_data2" = ashp_intv_ann_data2,
"ashp_intv_data1" = ashp_intv_data1,
"ashp_intv_data2" = ashp_intv_data2,
"ashp_intv_ghg_elec" = ashp_intv_ghg_elec,
"ashp_intv_ghg_natgas" = ashp_intv_ghg_natgas,
"ashp_intv_ghg_total" = ashp_intv_ghg_total,
"ashp_intv_ghg_upstream" = ashp_intv_ghg_upstream,
"ashp_intv_capex1" = ashp_intv_capex1,
"ashp_intv_opex1" = ashp_intv_opex1,
"ashp_intv_opex2" = ashp_intv_opex2,
"ashp_intv_sumcapex" = ashp_intv_sumcapex,
"ashp_intv_sumopex" = ashp_intv_sumopex)
)
weatherize_outputlist <- (list("weatherize_boundary_mgnl" = weatherize_boundary_mgnl,
"weatherize_ref_ann_data1" = weatherize_ref_ann_data1,
"weatherize_ref_ann_data2" = weatherize_ref_ann_data2,
"weatherize_ref_data1" = weatherize_ref_data1,
"weatherize_ref_data2" = weatherize_ref_data2,
"weatherize_ref_ghg_elec" = weatherize_ref_ghg_elec,
"weatherize_ref_ghg_natgas" = weatherize_ref_ghg_natgas,
"weatherize_ref_ghg_total" = weatherize_ref_ghg_total,
"weatherize_ref_ghg_upstream" = weatherize_ref_ghg_upstream,
"weatherize_ref_capex1" = weatherize_ref_capex1,
"weatherize_ref_opex1" = weatherize_ref_opex1,
"weatherize_ref_opex2" = weatherize_ref_opex2,
"weatherize_ref_sumcapex" = weatherize_ref_sumcapex,
"weatherize_ref_sumopex" = weatherize_ref_sumopex,
"weatherize_intv_ann_data1" = weatherize_intv_ann_data1,
"weatherize_intv_ann_data2" = weatherize_intv_ann_data2,
"weatherize_intv_data1" = weatherize_intv_data1,
"weatherize_intv_data2" = weatherize_intv_data2,
"weatherize_intv_ghg_elec" = weatherize_intv_ghg_elec,
"weatherize_intv_ghg_natgas" = weatherize_intv_ghg_natgas,
"weatherize_intv_ghg_total" = weatherize_intv_ghg_total,
"weatherize_intv_ghg_upstream" = weatherize_intv_ghg_upstream,
"weatherize_intv_capex1" = weatherize_intv_capex1,
"weatherize_intv_opex1" = weatherize_intv_opex1,
"weatherize_intv_opex2" = weatherize_intv_opex2,
"weatherize_intv_sumcapex" = weatherize_intv_sumcapex,
"weatherize_intv_sumopex" = weatherize_intv_sumopex)
)
hpwh_outputlist <- (list("hpwh_boundary_mgnl" = hpwh_boundary_mgnl,
"hpwh_ref_ann_data1" = hpwh_ref_ann_data1,
"hpwh_ref_ann_data2" = hpwh_ref_ann_data2,
"hpwh_ref_data1" = hpwh_ref_data1,
"hpwh_ref_data2" = hpwh_ref_data2,
"hpwh_ref_ghg_elec" = hpwh_ref_ghg_elec,
"hpwh_ref_ghg_natgas" = hpwh_ref_ghg_natgas,
"hpwh_ref_ghg_total" = hpwh_ref_ghg_total,
"hpwh_ref_ghg_upstream" = hpwh_ref_ghg_upstream,
"hpwh_ref_capex1" = hpwh_ref_capex1,
"hpwh_ref_opex1" = hpwh_ref_opex1,
"hpwh_ref_opex2" = hpwh_ref_opex2,
"hpwh_ref_sumcapex" = hpwh_ref_sumcapex,
"hpwh_ref_sumopex" = hpwh_ref_sumopex,
"hpwh_intv_ann_data1" = hpwh_intv_ann_data1,
"hpwh_intv_ann_data2" = hpwh_intv_ann_data2,
"hpwh_intv_data1" = hpwh_intv_data1,
"hpwh_intv_data2" = hpwh_intv_data2,
"hpwh_intv_ghg_elec" = hpwh_intv_ghg_elec,
"hpwh_intv_ghg_natgas" = hpwh_intv_ghg_natgas,
"hpwh_intv_ghg_total" = hpwh_intv_ghg_total,
"hpwh_intv_ghg_upstream" = hpwh_intv_ghg_upstream,
"hpwh_intv_capex1" = hpwh_intv_capex1,
"hpwh_intv_opex1" = hpwh_intv_opex1,
"hpwh_intv_opex2" = hpwh_intv_opex2,
"hpwh_intv_sumcapex" = hpwh_intv_sumcapex,
"hpwh_intv_sumopex" = hpwh_intv_sumopex)
)
summary_outputlist <- (list("cashflow_investment" = cashflow_investment,
"cashflow_opex" = cashflow_opex,
"cashflow_private" = cashflow_private,
"cashflow_econ" = cashflow_econ,
"cashflow_social" = cashflow_social,
"coben1_sim" = coben1_sim,
"coben1_value" = coben1_value,
"ghg_mitigation" = ghg_mitigation,
"intv_boundary_mgnl" = intv_boundary_mgnl,
"intv_capex_total" = intv_capex_total,
"intv_costs_econ" = intv_costs_econ,
"intv_ghg_total" = intv_ghg_total,
"intv_opex_total" = intv_opex_total,
"ref_boundary_mgnl" = ref_boundary_mgnl,
"ref_capex_total" = ref_capex_total,
"ref_costs_econ" = ref_costs_econ,
"ref_ghg_total" = ref_ghg_total,
"ref_opex_total" = ref_opex_total)
)
#write excel and save p1 outputs (NOTE: Change names for each parameter)
write_xlsx(ashp_outputlist, path = "ashp_output.xlsx")
write_xlsx(weatherize_outputlist, path = "weatherize_output.xlsx")
write_xlsx(hpwh_outputlist, path = "hpwh_output.xlsx")
write_xlsx(summary_outputlist, path = "summary_output.xlsx")
# Calculates three seperate tables of NPV for private, economic and social costs, using the range of discount rates provided
cba_discountrange(dr_min = 0, dr_max = 7, scenario_lifetime = scenario_years)
# Calculates statistics for the Monte Carlo Simulation (lower bound, median, and upper bound)
mcs_stats(lower_bound = .25, upper_bound = .75)
# Econ NPV matrix
npv_econ_medians <- data.frame(matrix(NA, nrow = 26, ncol = 71))
years <- output_headers
drcolnames <- paste0("dr",((0:70)/10))
colnames(npv_econ_medians) <- drcolnames # column headers for each discount rate: seq(0, 7, by = 0.1)
rownames(npv_econ_medians) <- years
View(ghg_mitigation)
View(cashflow_social)
